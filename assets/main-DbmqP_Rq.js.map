{"version":3,"file":"main-DbmqP_Rq.js","sources":["../../src/js/utils.js","../../src/js/startGame.js","../../src/js/resetGame.js","../../src/js/createDOMTree.js","../../src/js/gameLogic.js","../../src/js/keyboard.js","../../src/js/app.js","../../src/main.js"],"sourcesContent":["/**\n * Creates and returns a new DOM element with the specified properties.\n * @param {Object} options - The options for creating the DOM element.\n * @param {string} [options.tagName='div'] - The tag name of the element.\n * @param {string[]} [options.classList=[]] - A list of CSS classes to apply to the element.\n * @param {string} [options.textContent=''] - The text content of the element.\n * @param {Object} [options.attributes={}] - A map of attributes to set on the element.\n * @returns {HTMLElement} - The created DOM element.\n */\nexport function createDOMElement({\n  tagName = 'div',\n  classList = [],\n  textContent = '',\n  attributes = {},\n} = {}) {\n  const element = document.createElement(tagName);\n  if (Array.isArray(classList)) {\n    element.classList.add(...classList);\n  } else if (classList.trim()) {\n    element.classList.add(...classList.split(' '));\n  }\n  if (textContent) {\n    element.textContent = textContent;\n  }\n  if (attributes) {\n    Object.entries(attributes).forEach(([key, value]) =>\n      element.setAttribute(key, value),\n    );\n  }\n\n  return element;\n}\n","import data from '../questions.json';\nimport { createDOMElement } from './utils.js';\n\nexport const gameState = { isEnd: false, counter: 0 };\n\nlet questions = sortData(data);\nlet secretWord = '';\n\nfunction sortData(data) {\n  return [...data.sort(() => Math.random() - 0.5)];\n}\n\nfunction renderLetter(charIndex) {\n  return createDOMElement({\n    tagName: 'li',\n    textContent: '_',\n    classList: ['header-primary'],\n    attributes: {\n      'data-index': charIndex,\n    },\n  });\n}\n\n/**\n * Retrieves the current secret word.\n * @returns {string[]} - An array of characters representing the secret word.\n */\nexport function getSecretWord() {\n  return secretWord;\n}\n\n/**\n * Initializes the game by selecting a new word, rendering its letters, and displaying the hint.\n * @param {Object} elements - An object containing the DOM elements used in the game.\n */\nexport function startGame(elements) {\n  if (questions.length === 0) {\n    questions = sortData(data);\n  }\n  const question = questions.pop();\n  secretWord = question.word.split('');\n  elements.hint.textContent = question.question;\n  elements.wordLetters = {};\n  secretWord.forEach((_, index) => {\n    elements.wordLetters[index] = renderLetter(index, elements);\n    elements.wordWrapper.append(elements.wordLetters[index]);\n  });\n  console.log('secret word:', secretWord.join(''));\n}\n","import { gameState, startGame } from './startGame.js';\n\n/**\n * Resets the game state, updates the UI elements, and starts a new game.\n * @param { Object } elements - An object containing the DOM elements used in the game.\n */\nexport function resetGame(elements) {\n  elements.image.src = './images/empty-gallows.png';\n  elements.guessesCounter.textContent = '0';\n  elements.wordWrapper.innerHTML = '';\n  Object.values(elements.keyboardKeys).forEach((button) => {\n    if (button.disabled) {\n      button.disabled = false;\n    }\n  });\n  gameState.isEnd = false;\n  gameState.counter = 0;\n  startGame(elements);\n}\n","import { createDOMElement } from './utils.js';\nimport { resetGame } from './resetGame.js';\n\n/**\n * Creates and appends the DOM tree for the game interface.\n * Initializes event listeners and returns references to the essential elements.\n * @returns {Object} - An object containing references to the created DOM elements.\n */\nexport function createDOMTree() {\n  const allElements = {};\n\n  allElements.container = createDOMElement({\n    classList: ['container', 'flex', 'flex_gap-48'],\n  });\n  allElements.wrapperLeft = createDOMElement({\n    classList: [\n      'flex',\n      'flex--column',\n      'flex_gap-20',\n      'flex--align-justify-center',\n    ],\n  });\n  allElements.wrapperRight = createDOMElement({\n    classList: ['flex', 'flex--column', 'flex_gap-20', 'flex--align-center'],\n  });\n\n  allElements.container.append(\n    allElements.wrapperLeft,\n    allElements.wrapperRight,\n  );\n\n  allElements.imageWrapper = createDOMElement();\n  allElements.image = createDOMElement({\n    tagName: 'img',\n    classList: ['image'],\n    attributes: {\n      alt: 'gallows',\n      src: './images/empty-gallows.png',\n    },\n  });\n  allElements.imageWrapper.append(allElements.image);\n  allElements.headerPrimary = createDOMElement({\n    tagName: 'h1',\n    textContent: 'hangman game',\n    classList: ['header-primary'],\n  });\n  allElements.wrapperLeft.append(\n    allElements.imageWrapper,\n    allElements.headerPrimary,\n  );\n\n  allElements.wordWrapper = createDOMElement({\n    tagName: 'ul',\n    classList: ['flex', 'flex_gap-10'],\n  });\n  allElements.hintWrapper = createDOMElement({\n    tagName: 'p',\n    textContent: 'Hint: ',\n  });\n  allElements.hint = createDOMElement({\n    tagName: 'strong',\n  });\n  allElements.hintWrapper.append(allElements.hint);\n  allElements.incorrectWrapper = createDOMElement({\n    tagName: 'p',\n    textContent: 'Incorrect guesses: ',\n  });\n  allElements.guessesCounter = createDOMElement({\n    tagName: 'span',\n    textContent: '0',\n    classList: ['counter-text'],\n  });\n  allElements.incorrectText = createDOMElement({\n    tagName: 'span',\n    textContent: ' / 6',\n    classList: ['counter-text'],\n  });\n  allElements.incorrectWrapper.append(\n    allElements.guessesCounter,\n    allElements.incorrectText,\n  );\n  allElements.keyboardWrapper = createDOMElement({\n    classList: ['flex', 'flex--wrap', 'flex_gap-10'],\n  });\n  allElements.wrapperRight.append(\n    allElements.wordWrapper,\n    allElements.hintWrapper,\n    allElements.incorrectWrapper,\n    allElements.keyboardWrapper,\n  );\n\n  allElements.modal = createDOMElement({\n    tagName: 'dialog',\n    classList: [\n      'modal',\n      'flex',\n      'flex--column',\n      'flex--align-center',\n      'flex_gap-20',\n    ],\n  });\n  allElements.modalButton = createDOMElement({\n    tagName: 'button',\n    classList: ['button', 'modal-button'],\n    textContent: 'Play again',\n  });\n  allElements.modalText = createDOMElement({\n    tagName: 'p',\n  });\n  allElements.modalText2 = createDOMElement({\n    tagName: 'p',\n    textContent: 'Secret word: ',\n  });\n  allElements.secretWord = createDOMElement({\n    tagName: 'strong',\n  });\n  allElements.modalText2.append(allElements.secretWord);\n  allElements.modal.append(\n    allElements.modalText,\n    allElements.modalText2,\n    allElements.modalButton,\n  );\n\n  document.body.append(allElements.container, allElements.modal);\n\n  const usedElements = {\n    image: allElements.image,\n    hint: allElements.hint,\n    wordWrapper: allElements.wordWrapper,\n    keyboardWrapper: allElements.keyboardWrapper,\n    guessesCounter: allElements.guessesCounter,\n    modal: {\n      modal: allElements.modal,\n      text: allElements.modalText,\n      word: allElements.secretWord,\n    },\n  };\n\n  allElements.modalButton.addEventListener('click', () => {\n    resetGame(usedElements);\n    usedElements.modal.modal.close();\n  });\n\n  return usedElements;\n}\n","import { gameState, getSecretWord } from './startGame.js';\n\nconst MAX_ATTEMPTS = 6;\nconst GAME_MESSAGES = {\n  WIN: 'YOU WIN',\n  LOSE: 'GAME OVER',\n};\n\nfunction findAllIndexes(char) {\n  const indexes = [];\n  getSecretWord().forEach((letter, index) => {\n    if (letter === char) {\n      indexes.push(index);\n    }\n  });\n  return indexes.length === 0 ? false : indexes;\n}\n\nfunction updateCounter(guessesCounterElement, imageElement) {\n  gameState.counter++;\n  if (gameState.counter <= MAX_ATTEMPTS) {\n    guessesCounterElement.textContent = gameState.counter;\n    imageElement.src = `./images/gallows-${gameState.counter}.png`;\n  }\n}\n\nfunction checkGameOver(wordLength, modal) {\n  if (!(gameState.counter === MAX_ATTEMPTS) && wordLength) {\n    return;\n  }\n  gameState.isEnd = true;\n  modal.text.textContent = wordLength ? GAME_MESSAGES.LOSE : GAME_MESSAGES.WIN;\n  modal.word.textContent = getSecretWord().join('').toUpperCase();\n  modal.modal.showModal();\n}\n\n/**\n * Handles the core game logic: checks the entered character, updates the game state,\n * and ends the game if necessary.\n * @param {Object} elements - An object containing the DOM elements used in the game.\n * @param {string} char - The entered character.\n * @param {HTMLButtonElement} charButton - The button corresponding to the entered character.\n */\nexport function gameLogic(elements, char, charButton) {\n  const indexes = findAllIndexes(char);\n  if (!indexes) {\n    updateCounter(elements.guessesCounter, elements.image);\n    charButton.disabled = true;\n  } else {\n    indexes.forEach((index) => {\n      elements.wordLetters[index].textContent = getSecretWord()[index];\n      delete elements.wordLetters[index];\n    });\n  }\n  checkGameOver(Object.keys(elements.wordLetters).length, elements.modal);\n}\n","import { createDOMElement } from './utils.js';\nimport { gameLogic } from './gameLogic.js';\nimport { gameState } from './startGame.js';\n\nconst DELAY_TIME = 300;\nconst RUSSIAN_LAYOUT = { firstChar: 'а', lastChar: 'я' };\nconst ENGLISH_LAYOUT = {\n  firstCharCode: 'a'.charCodeAt(0),\n  lastCharCode: 'z'.charCodeAt(0),\n};\n\nfunction clickHandler(key, elements, char) {\n  if (key.disabled) {\n    return;\n  }\n  key.disabled = true;\n  key.classList.add('button-keyboard-active');\n  gameLogic(elements, char, key);\n  setTimeout(() => {\n    key.classList.remove('button-keyboard-active');\n  }, DELAY_TIME);\n}\n\nfunction keydownHandler(event, keyboardKeys) {\n  if (gameState.isEnd) {\n    return;\n  }\n  const key = event.key.toLowerCase();\n  if (key >= RUSSIAN_LAYOUT.firstChar && key <= RUSSIAN_LAYOUT.lastChar) {\n    console.log('Change the keyboard layout, please');\n    return;\n  }\n  if (!keyboardKeys[key]) {\n    return;\n  }\n  const newEvent = new MouseEvent('click');\n  keyboardKeys[key].dispatchEvent(newEvent);\n}\n\nfunction renderKey(charCode, elements) {\n  const char = String.fromCharCode(charCode);\n  const key = createDOMElement({\n    tagName: 'button',\n    classList: ['button', 'button-keyboard'],\n  });\n  const keyText = createDOMElement({\n    tagName: 'p',\n    classList: ['keyboard-text'],\n    textContent: char,\n  });\n  key.append(keyText);\n  elements.keyboardWrapper.append(key);\n  elements.keyboardKeys[char] = key;\n  key.addEventListener('click', () => {\n    clickHandler(key, elements, char);\n  });\n  return key;\n}\n\n/**\n * Renders the keyboard and adds event listeners for each key.\n * @param {Object} elements - An object containing the DOM elements used in the game.\n */\nexport function keyboard(elements) {\n  elements.keyboardKeys = {};\n  for (\n    let i = ENGLISH_LAYOUT.firstCharCode;\n    i <= ENGLISH_LAYOUT.lastCharCode;\n    i++\n  ) {\n    renderKey(i, elements);\n  }\n  delete elements.keyboardWrapper;\n  window.addEventListener('keydown', (event) => {\n    keydownHandler(event, elements.keyboardKeys);\n  });\n}\n","import { createDOMTree } from './createDOMTree.js';\nimport { keyboard } from './keyboard.js';\nimport { startGame } from './startGame.js';\n\nexport function app() {\n  const elements = createDOMTree();\n  startGame(elements);\n  keyboard(elements);\n}\n","import { app } from './js/app.js';\n\napp();\n"],"names":["createDOMElement","tagName","classList","textContent","attributes","element","key","value","gameState","questions","sortData","data","secretWord","renderLetter","charIndex","getSecretWord","startGame","elements","question","_","index","resetGame","button","createDOMTree","allElements","usedElements","MAX_ATTEMPTS","GAME_MESSAGES","findAllIndexes","char","indexes","letter","updateCounter","guessesCounterElement","imageElement","checkGameOver","wordLength","modal","gameLogic","charButton","DELAY_TIME","RUSSIAN_LAYOUT","ENGLISH_LAYOUT","clickHandler","keydownHandler","event","keyboardKeys","newEvent","renderKey","charCode","keyText","keyboard","i","app"],"mappings":"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"}